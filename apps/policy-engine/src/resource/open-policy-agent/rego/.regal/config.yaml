rules:
  style:
  # This rule is disabled in tests to let us paste in big JSON payloads without having to worry about line length.
    rule-length:
      level: error
      ignore:
        files:
          - "*_test.rego"
    line-length:
      level: error
      ignore:
        files:
          - "*_test.rego"
  # Signal TODO comments to the PR reviewer
    todo-comment:
      level: warning
  # We use camel case to comply with our naming conventions
    prefer-snake-case:
      level: ignore
  # In the future, it can be beneficial to re-activate this rule to ensure once source of truth for data and input shape.
  # It is already done for "data" part, through 'armory.entities' package. "input" is still accessed on the fly when needed.
  # If we do so, then we can ignore this rule only in querying packages.
    external-reference:
      level: ignore
  custom:
    naming-convention:
      level: error
      ignore:
  # Ignore the naming convention for test files - OPA test runner looks at 'test_' prefixed rules to run.
  # Ignore the naming convention for 'policy' files - Our policy definition can't be camelCased: permit[{...}].
        files:
          - "*_policies.rego"
          - "*_test.rego"
      conventions:
  # allow only "private" rules and functions, i.e. those starting with
  # underscore, or rules named "deny" or "allow"
        - pattern: '^[a-z]+([A-Z][a-z0-9]+)*$'
  # one of "package", "rule", "function", "variable"
          targets:
            - rule
            - function
          description: "Use camelCase for rules and functions"
  idiomatic:
  # Having this rule is certainly wishable as it improves clarity when navigating the codebase, and also pushes for good dependency management practices and reusability of written code - as your directory needs to be separated packages.
  # However, we can't move away too much from our god 'main' package without rewriting some logic in how we inject policies into the engine.
    directory-package-mismatch:
      level: ignore
  # Disabling this rule allows to call tested function from the test file without importing functionality package.
  # Rationale of the rule is to clearly separate the tested code from the test code.
  # We are doing this by moving test files to a separate directory, also suffixing files with _test.
  testing:
    test-outside-test-package:
      level: ignore
