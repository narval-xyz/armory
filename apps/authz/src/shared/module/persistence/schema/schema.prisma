generator client {
  provider = "prisma-client-js"
  // Output into a separate subdirectory so multiple schemas can be used in a
  // monorepo.
  //
  // Reference: https://github.com/nrwl/nx-recipes/tree/main/nestjs-prisma
  output   = "../../../../../../../node_modules/@prisma/client/authz"
}

datasource db {
  provider = "sqlite"
  url      = env("ENGINE_DATABASE_URL")
}

model Organization {
  uid       String   @id

  @@map("organization")
}

model AuthCredential {
  uid       String   @id @map("uid")
  pubKey    String   @map("pub_key")
  alg       String   @map("alg")
  userId    String   @map("user_id")

  @@map("auth_credential")
}

model User {
  uid       String   @id
  role      String

  @@map("user")
}

model UserGroup {
  uid       String   @id

  @@map("user_group")
}

model UserGroupMembership {
  userId        String       @map("user_id")
  userGroupId   String   @map("user_group_id")

  @@id([userId, userGroupId])
  @@map("user_group_membership")
}

model Wallet {
  uid         String   @id
  address     String
  accountType String @map("account_type")
  // ChainId is only needed for chain-specific wallets (smart accounts)
  chainId     Int? @map("chain_id")

  @@map("wallet")
}

model WalletGroup {
  uid         String   @id
}

model WalletGroupMembership {
  walletId        String       @map("wallet_id")
  walletGroupId   String       @map("wallet_group_id")

  @@id([walletId, walletGroupId])
  @@map("wallet_group_membership")
}

model UserWalletAssignment {
  userId        String       @map("user_id")
  walletId      String       @map("wallet_id")

  @@id([userId, walletId])
  @@map("user_wallet_assignment")
}

model AddressBookAccount {
  uid             String   @id
  address         String
  chainId         Int @map("chain_id")
  classification  String

  @@map("address_book_account")
}

model Token {
  uid             String   @id
  address         String
  symbol          String
  chainId         Int @map("chain_id")
  decimals        Int

  @@map("token")
}