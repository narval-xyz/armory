generator client {
  provider = "prisma-client-js"
  // Output into a separate subdirectory so multiple schemas can be used in a
  // monorepo.
  //
  // Reference: https://github.com/nrwl/nx-recipes/tree/main/nestjs-prisma
  output   = "../../../../../../../node_modules/@prisma/client/armory"
}

datasource db {
  provider = "postgresql"
  url      = env("ARMORY_DATABASE_URL")
}

model Organization {
  id        String   @id @default(uuid()) @db.VarChar(255)
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("organization")
}

//
// Policy Engine Module
//

enum AuthorizationRequestStatus {
  CREATED
  FAILED
  CANCELED
  PROCESSING
  APPROVING
  PERMITTED
  FORBIDDEN
}

model AuthorizationRequest {
  id             String                     @id @default(uuid()) @db.VarChar(255)
  orgId          String                     @map("org_id")
  status         AuthorizationRequestStatus @default(CREATED)
  // Duplicate the action to pick the `request` schema at the application-level.
  // After the decoding, the model's action is not used in the domain type.
  action         String
  request        Json
  idempotencyKey String?                    @unique @map("idempotency_key")
  authnSig       String                     @map("authn_sig")
  createdAt      DateTime                   @default(now()) @map("created_at")
  updatedAt      DateTime                   @default(now()) @updatedAt @map("updated_at")

  evaluationLog EvaluationLog[]
  approvals     AuthorizationRequestApproval[]

  @@map("authorization_request")
}

model AuthorizationRequestApproval {
  id        String   @id @default(uuid()) @db.VarChar(255)
  requestId String   @map("request_id")
  sig       String
  createdAt DateTime @default(now()) @map("created_at")

  request AuthorizationRequest @relation(fields: [requestId], references: [id])

  @@map("authorization_request_approval")
}

model EvaluationLog {
  id        String   @id @default(uuid()) @db.VarChar(255)
  orgId     String   @map("org_id")
  requestId String   @map("request_id")
  decision  String
  signature String?
  createdAt DateTime @default(now()) @map("created_at")

  request AuthorizationRequest @relation(fields: [requestId], references: [id])

  @@map("evaluation_log")
}

//
// Transfer Tracking Module
//

model ApprovedTransfer {
  id          String   @id @default(uuid()) @db.VarChar(255)
  orgId       String   @map("org_id")
  requestId   String   @map("request_id")
  chainId     Int      @map("chain_id")
  from        String
  to          String
  token       String
  amount      String
  rates       Json
  initiatedBy String   @map("initiated_by")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("approved_transfer")
}

//
// Data Feed Module
//

model Feed {
  id        String   @id @default(uuid()) @db.VarChar(255)
  orgId     String   @map("org_id")
  requestId String   @map("request_id")
  source    String
  sig       String?
  alg       String?
  pubKey    String?
  data      Json
  createdAt DateTime @default(now()) @map("created_at")

  @@map("feed")
}

// Data Store

enum UserRoles {
  root
  admin
  member
  manager
}

enum AccountTypes {
  eoa
  aa
}

model Client {
  id           String        @id @default(uuid()) @db.VarChar(255)
  name         String
  users        User[]
  wallets      Wallet[]
  userGroups   UserGroup[]
  walletGroups WalletGroup[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("client")
}

model User {
  id       String @id @default(uuid()) @db.VarChar(255)
  clientId String @map("client_id") @db.VarChar(255)
  client   Client @relation(fields: [clientId], references: [id])

  name    String
  role    UserRoles
  groups  UserGroup[]
  wallets WalletAssignee[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("user")
}

model Wallet {
  id       String @id @default(uuid()) @db.VarChar(255)
  clientId String @map("client_id") @db.VarChar(255)
  client   Client @relation(fields: [clientId], references: [id])

  address     String
  accountType AccountTypes     @map("account_type")
  chainId     Int?             @map("chain_id")
  assignees   WalletAssignee[]
  groups      WalletGroup[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("wallet")
}

model WalletAssignee {
  id String @id @default(uuid()) @db.VarChar(255)

  user     User   @relation(fields: [userId], references: [id])
  wallet   Wallet @relation(fields: [walletId], references: [id])
  userId   String @map("user_id")
  walletId String @map("wallet_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("wallet_assignee")
}

model UserGroup {
  id       String @id @default(uuid()) @db.VarChar(255)
  clientId String @map("client_id") @db.VarChar(255)
  client   Client @relation(fields: [clientId], references: [id])

  name  String
  users User[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("user_group")
}

model WalletGroup {
  id       String @id @default(uuid()) @db.VarChar(255)
  clientId String @map("client_id") @db.VarChar(255)
  client   Client @relation(fields: [clientId], references: [id])

  name    String
  wallets Wallet[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("wallet_group")
}
