export enum Action {
  CREATE_ORGANIZATION = 'CREATE_ORGANIZATION',

  CREATE_USER = 'CREATE_USER',
  EDIT_USER = 'user:edit',
  DELETE_USER = 'user:delete',
  CHANGE_USER_ROLE = 'user:change-role',

  REGISTER_WALLET = 'REGISTER_WALLET',
  EDIT_WALLET = 'wallet:edit',
  ASSIGN_WALLET = 'wallet:assign',
  UNASSIGN_WALLET = 'wallet:unassign',

  CREATE_USER_GROUP = 'user-group:create',
  EDIT_USER_GROUP = 'user-group:edit',
  DELETE_USER_GROUP = 'user-group:delete',

  CREATE_WALLET_GROUP = 'wallet-group:create',
  EDIT_WALLET_GROUP = 'wallet-group:edit',
  DELETE_WALLET_GROUP = 'wallet-group:delete',

  SET_POLICY_RULES = 'setPolicyRules',

  SIGN_TRANSACTION = 'signTransaction',
  SIGN_RAW = 'signRaw',
  SIGN_MESSAGE = 'signMessage',
  SIGN_TYPED_DATA = 'signTypedData'
}

export type AuthCredential = {
  uid: string // sha256 of the pubKey, used as the short identifier
  pubKey: string
  alg: Alg
  userId: string
}

export enum UserRole {
  ROOT = 'ROOT',
  ADMIN = 'ADMIN',
  MEMBER = 'MEMBER',
  MANAGER = 'MANAGER'
}

export enum AccountType {
  EOA = 'eoa',
  AA = '4337'
}

export type Signature = {
  sig: string
  alg: Alg
  /**
   * Depending on the alg, this may be necessary (e.g., RSA cannot recover the
   * public key from the signature)
   */
  pubKey: string
}

export enum Alg {
  ES256K = 'ES256K', // secp256k1, an Ethereum EOA
  ES256 = 'ES256', // secp256r1, ecdsa but not ethereum
  RS256 = 'RS256'
}

export type Hex = `0x${string}`

export type Address = `0x${string}`

export type AccessList = {
  address: Address
  storageKeys: Hex[]
}[]

export type TransactionRequest = {
  chainId: number
  from: Address
  nonce?: number
  accessList?: AccessList
  data?: Hex
  gas?: bigint
  maxFeePerGas?: bigint
  maxPriorityFeePerGas?: bigint
  to?: Address | null
  type?: '2'
  value?: Hex
}

/**
 * Action Types; these correspond to each Action
 */
type BaseAction = {
  action: Action
  nonce: string
}

type BaseAdminRequest = {
  /**
   * The initiator signature of the request using `hashRequest` method to ensure
   * SHA256 format.
   */
  authentication: Signature

  /**
   * Approval from the ENGINE; this is the attestation generated by an Evaluation of the action, and now the ENGINE is the consumer of the attestation to do a data change.
   */
  approvals: Signature[]
}

export type SignTransactionAction = BaseAction & {
  action: Action.SIGN_TRANSACTION
  resourceId: string
  transactionRequest: TransactionRequest
}

export type SignMessageAction = BaseAction & {
  action: Action.SIGN_MESSAGE
  resourceId: string
  message: string
}

export type CreateOrganizationAction = BaseAction & {
  action: Action.CREATE_ORGANIZATION
  organization: {
    uid: string
    credential: AuthCredential
  }
}

export type CreateOrganizationRequest = BaseAdminRequest & {
  request: CreateOrganizationAction
}

export type CreateUserAction = BaseAction & {
  action: Action.CREATE_USER
  user: {
    uid: string
    role: UserRole
    credential?: AuthCredential
  }
}

export type CreateUserRequest = BaseAdminRequest & {
  request: CreateUserAction
}

export type RegisterWalletAction = BaseAction & {
  action: Action.REGISTER_WALLET
  wallet: {
    uid: string
    address: Address
    accountType: AccountType
    chainId?: number
  }
}

export type RegisterWalletRequest = BaseAdminRequest & {
  request: RegisterWalletAction
}
