/* tslint:disable */
/* eslint-disable */
/**
 * Armory
 * Authentication and authorization system for web3.0
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthorizationRequestDto
 */
export interface AuthorizationRequestDto {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDto
     */
    'authentication': string;
    /**
     * 
     * @type {AuthorizationRequestDtoRequest}
     * @memberof AuthorizationRequestDto
     */
    'request': AuthorizationRequestDtoRequest;
    /**
     * 
     * @type {AuthorizationRequestDtoMetadata}
     * @memberof AuthorizationRequestDto
     */
    'metadata'?: AuthorizationRequestDtoMetadata;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthorizationRequestDto
     */
    'approvals'?: Array<string>;
}
/**
 * 
 * @export
 * @interface AuthorizationRequestDtoMetadata
 */
export interface AuthorizationRequestDtoMetadata {
    /**
     * 
     * @type {AuthorizationRequestDtoMetadataAudience}
     * @memberof AuthorizationRequestDtoMetadata
     */
    'audience'?: AuthorizationRequestDtoMetadataAudience;
    /**
     * 
     * @type {number}
     * @memberof AuthorizationRequestDtoMetadata
     */
    'expiresIn'?: number;
}
/**
 * @type AuthorizationRequestDtoMetadataAudience
 * @export
 */
export type AuthorizationRequestDtoMetadataAudience = Array<string> | string;

/**
 * @type AuthorizationRequestDtoRequest
 * @export
 */
export type AuthorizationRequestDtoRequest = AuthorizationRequestDtoRequestOneOf | AuthorizationRequestDtoRequestOneOf1 | AuthorizationRequestDtoRequestOneOf2 | AuthorizationRequestDtoRequestOneOf3 | AuthorizationRequestDtoRequestOneOf4 | AuthorizationRequestDtoRequestOneOf5;

/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOf
 */
export interface AuthorizationRequestDtoRequestOneOf {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf
     */
    'action': AuthorizationRequestDtoRequestOneOfActionEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf
     */
    'resourceId': string;
    /**
     * 
     * @type {AuthorizationRequestDtoRequestOneOfTransactionRequest}
     * @memberof AuthorizationRequestDtoRequestOneOf
     */
    'transactionRequest': AuthorizationRequestDtoRequestOneOfTransactionRequest;
}

export const AuthorizationRequestDtoRequestOneOfActionEnum = {
    SignTransaction: 'signTransaction'
} as const;

export type AuthorizationRequestDtoRequestOneOfActionEnum = typeof AuthorizationRequestDtoRequestOneOfActionEnum[keyof typeof AuthorizationRequestDtoRequestOneOfActionEnum];

/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOf1
 */
export interface AuthorizationRequestDtoRequestOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf1
     */
    'action': AuthorizationRequestDtoRequestOneOf1ActionEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf1
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf1
     */
    'resourceId': string;
    /**
     * 
     * @type {AuthorizationRequestDtoRequestOneOf1Message}
     * @memberof AuthorizationRequestDtoRequestOneOf1
     */
    'message': AuthorizationRequestDtoRequestOneOf1Message;
}

export const AuthorizationRequestDtoRequestOneOf1ActionEnum = {
    SignMessage: 'signMessage'
} as const;

export type AuthorizationRequestDtoRequestOneOf1ActionEnum = typeof AuthorizationRequestDtoRequestOneOf1ActionEnum[keyof typeof AuthorizationRequestDtoRequestOneOf1ActionEnum];

/**
 * @type AuthorizationRequestDtoRequestOneOf1Message
 * @export
 */
export type AuthorizationRequestDtoRequestOneOf1Message = AuthorizationRequestDtoRequestOneOf1MessageOneOf | string;

/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOf1MessageOneOf
 */
export interface AuthorizationRequestDtoRequestOneOf1MessageOneOf {
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOf1MessageOneOf
     */
    'raw': any;
}
/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOf2
 */
export interface AuthorizationRequestDtoRequestOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf2
     */
    'action': AuthorizationRequestDtoRequestOneOf2ActionEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf2
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf2
     */
    'resourceId': string;
    /**
     * 
     * @type {AuthorizationRequestDtoRequestOneOf2TypedData}
     * @memberof AuthorizationRequestDtoRequestOneOf2
     */
    'typedData': AuthorizationRequestDtoRequestOneOf2TypedData;
}

export const AuthorizationRequestDtoRequestOneOf2ActionEnum = {
    SignTypedData: 'signTypedData'
} as const;

export type AuthorizationRequestDtoRequestOneOf2ActionEnum = typeof AuthorizationRequestDtoRequestOneOf2ActionEnum[keyof typeof AuthorizationRequestDtoRequestOneOf2ActionEnum];

/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOf2TypedData
 */
export interface AuthorizationRequestDtoRequestOneOf2TypedData {
    /**
     * 
     * @type {AuthorizationRequestDtoRequestOneOf2TypedDataDomain}
     * @memberof AuthorizationRequestDtoRequestOneOf2TypedData
     */
    'domain': AuthorizationRequestDtoRequestOneOf2TypedDataDomain;
    /**
     * 
     * @type {{ [key: string]: Array<AuthorizationRequestDtoRequestOneOf2TypedDataTypesValueInner>; }}
     * @memberof AuthorizationRequestDtoRequestOneOf2TypedData
     */
    'types': { [key: string]: Array<AuthorizationRequestDtoRequestOneOf2TypedDataTypesValueInner>; };
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf2TypedData
     */
    'primaryType': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AuthorizationRequestDtoRequestOneOf2TypedData
     */
    'message': { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOf2TypedDataDomain
 */
export interface AuthorizationRequestDtoRequestOneOf2TypedDataDomain {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf2TypedDataDomain
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf2TypedDataDomain
     */
    'version'?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthorizationRequestDtoRequestOneOf2TypedDataDomain
     */
    'chainId'?: number;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOf2TypedDataDomain
     */
    'verifyingContract'?: any;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOf2TypedDataDomain
     */
    'salt'?: any;
}
/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOf2TypedDataTypesValueInner
 */
export interface AuthorizationRequestDtoRequestOneOf2TypedDataTypesValueInner {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf2TypedDataTypesValueInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf2TypedDataTypesValueInner
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOf3
 */
export interface AuthorizationRequestDtoRequestOneOf3 {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf3
     */
    'action': AuthorizationRequestDtoRequestOneOf3ActionEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf3
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf3
     */
    'resourceId': string;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOf3
     */
    'rawMessage': any;
}

export const AuthorizationRequestDtoRequestOneOf3ActionEnum = {
    SignRaw: 'signRaw'
} as const;

export type AuthorizationRequestDtoRequestOneOf3ActionEnum = typeof AuthorizationRequestDtoRequestOneOf3ActionEnum[keyof typeof AuthorizationRequestDtoRequestOneOf3ActionEnum];

/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOf4
 */
export interface AuthorizationRequestDtoRequestOneOf4 {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf4
     */
    'action': AuthorizationRequestDtoRequestOneOf4ActionEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf4
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf4
     */
    'resourceId': string;
    /**
     * 
     * @type {AuthorizationRequestDtoRequestOneOf4UserOperation}
     * @memberof AuthorizationRequestDtoRequestOneOf4
     */
    'userOperation': AuthorizationRequestDtoRequestOneOf4UserOperation;
}

export const AuthorizationRequestDtoRequestOneOf4ActionEnum = {
    SignUserOperation: 'signUserOperation'
} as const;

export type AuthorizationRequestDtoRequestOneOf4ActionEnum = typeof AuthorizationRequestDtoRequestOneOf4ActionEnum[keyof typeof AuthorizationRequestDtoRequestOneOf4ActionEnum];

/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOf4UserOperation
 */
export interface AuthorizationRequestDtoRequestOneOf4UserOperation {
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'sender': any;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'nonce': string;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'initCode': any;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'callData': any;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'callGasLimit': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'verificationGasLimit': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'preVerificationGas': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'maxFeePerGas': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'maxPriorityFeePerGas': string;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'paymasterAndData': any;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'entryPoint': any;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'signature': any;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'factoryAddress': any;
    /**
     * 
     * @type {number}
     * @memberof AuthorizationRequestDtoRequestOneOf4UserOperation
     */
    'chainId': number;
}
/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOf5
 */
export interface AuthorizationRequestDtoRequestOneOf5 {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf5
     */
    'action': AuthorizationRequestDtoRequestOneOf5ActionEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf5
     */
    'nonce': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOf5
     */
    'resourceId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthorizationRequestDtoRequestOneOf5
     */
    'permissions': Array<string>;
}

export const AuthorizationRequestDtoRequestOneOf5ActionEnum = {
    GrantPermission: 'grantPermission'
} as const;

export type AuthorizationRequestDtoRequestOneOf5ActionEnum = typeof AuthorizationRequestDtoRequestOneOf5ActionEnum[keyof typeof AuthorizationRequestDtoRequestOneOf5ActionEnum];

/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOfTransactionRequest
 */
export interface AuthorizationRequestDtoRequestOneOfTransactionRequest {
    /**
     * 
     * @type {number}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequest
     */
    'chainId': number;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequest
     */
    'from': any;
    /**
     * 
     * @type {number}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequest
     */
    'nonce'?: number;
    /**
     * 
     * @type {Array<AuthorizationRequestDtoRequestOneOfTransactionRequestAccessListInner>}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequest
     */
    'accessList'?: Array<AuthorizationRequestDtoRequestOneOfTransactionRequestAccessListInner>;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequest
     */
    'data'?: any;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequest
     */
    'gas'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequest
     */
    'maxFeePerGas'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequest
     */
    'maxPriorityFeePerGas'?: string;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequest
     */
    'to'?: any | null;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequest
     */
    'type'?: AuthorizationRequestDtoRequestOneOfTransactionRequestTypeEnum;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequest
     */
    'value'?: any;
}

export const AuthorizationRequestDtoRequestOneOfTransactionRequestTypeEnum = {
    _2: '2'
} as const;

export type AuthorizationRequestDtoRequestOneOfTransactionRequestTypeEnum = typeof AuthorizationRequestDtoRequestOneOfTransactionRequestTypeEnum[keyof typeof AuthorizationRequestDtoRequestOneOfTransactionRequestTypeEnum];

/**
 * 
 * @export
 * @interface AuthorizationRequestDtoRequestOneOfTransactionRequestAccessListInner
 */
export interface AuthorizationRequestDtoRequestOneOfTransactionRequestAccessListInner {
    /**
     * 
     * @type {any}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequestAccessListInner
     */
    'address': any;
    /**
     * 
     * @type {Array<any>}
     * @memberof AuthorizationRequestDtoRequestOneOfTransactionRequestAccessListInner
     */
    'storageKeys': Array<any>;
}
/**
 * 
 * @export
 * @interface AuthorizationResponseDto
 */
export interface AuthorizationResponseDto {
    /**
     * 
     * @type {Array<string>}
     * @memberof AuthorizationResponseDto
     */
    'approvals': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponseDto
     */
    'authentication': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponseDto
     */
    'clientId': string;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationResponseDto
     */
    'createdAt': any;
    /**
     * 
     * @type {Array<AuthorizationResponseDtoErrorsInner>}
     * @memberof AuthorizationResponseDto
     */
    'errors'?: Array<AuthorizationResponseDtoErrorsInner>;
    /**
     * 
     * @type {Array<AuthorizationResponseDtoEvaluationsInner>}
     * @memberof AuthorizationResponseDto
     */
    'evaluations': Array<AuthorizationResponseDtoEvaluationsInner>;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponseDto
     */
    'idempotencyKey'?: string | null;
    /**
     * 
     * @type {AuthorizationRequestDtoMetadata}
     * @memberof AuthorizationResponseDto
     */
    'metadata'?: AuthorizationRequestDtoMetadata;
    /**
     * 
     * @type {AuthorizationRequestDtoRequest}
     * @memberof AuthorizationResponseDto
     */
    'request': AuthorizationRequestDtoRequest;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponseDto
     */
    'status': AuthorizationResponseDtoStatusEnum;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationResponseDto
     */
    'updatedAt': any;
}

export const AuthorizationResponseDtoStatusEnum = {
    Created: 'CREATED',
    Canceled: 'CANCELED',
    Failed: 'FAILED',
    Processing: 'PROCESSING',
    Approving: 'APPROVING',
    Permitted: 'PERMITTED',
    Forbidden: 'FORBIDDEN'
} as const;

export type AuthorizationResponseDtoStatusEnum = typeof AuthorizationResponseDtoStatusEnum[keyof typeof AuthorizationResponseDtoStatusEnum];

/**
 * 
 * @export
 * @interface AuthorizationResponseDtoErrorsInner
 */
export interface AuthorizationResponseDtoErrorsInner {
    /**
     * 
     * @type {any}
     * @memberof AuthorizationResponseDtoErrorsInner
     */
    'context'?: any;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponseDtoErrorsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponseDtoErrorsInner
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponseDtoErrorsInner
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface AuthorizationResponseDtoEvaluationsInner
 */
export interface AuthorizationResponseDtoEvaluationsInner {
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponseDtoEvaluationsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponseDtoEvaluationsInner
     */
    'decision': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationResponseDtoEvaluationsInner
     */
    'signature': string | null;
    /**
     * 
     * @type {any}
     * @memberof AuthorizationResponseDtoEvaluationsInner
     */
    'createdAt': any;
}
/**
 * 
 * @export
 * @interface CreateClientRequestDto
 */
export interface CreateClientRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreateClientRequestDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientRequestDto
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateClientRequestDto
     */
    'useManagedDataStore'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateClientRequestDto
     */
    'clientSecret'?: string;
    /**
     * 
     * @type {CreateClientRequestDtoDataStore}
     * @memberof CreateClientRequestDto
     */
    'dataStore': CreateClientRequestDtoDataStore;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateClientRequestDto
     */
    'policyEngineNodes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CreateClientRequestDtoDataStore
 */
export interface CreateClientRequestDtoDataStore {
    /**
     * 
     * @type {CreateClientRequestDtoDataStoreEntity}
     * @memberof CreateClientRequestDtoDataStore
     */
    'entity': CreateClientRequestDtoDataStoreEntity;
    /**
     * 
     * @type {CreateClientRequestDtoDataStoreEntity}
     * @memberof CreateClientRequestDtoDataStore
     */
    'policy': CreateClientRequestDtoDataStoreEntity;
}
/**
 * 
 * @export
 * @interface CreateClientRequestDtoDataStoreEntity
 */
export interface CreateClientRequestDtoDataStoreEntity {
    /**
     * 
     * @type {CreateClientRequestDtoDataStoreEntityData}
     * @memberof CreateClientRequestDtoDataStoreEntity
     */
    'data': CreateClientRequestDtoDataStoreEntityData;
    /**
     * 
     * @type {CreateClientRequestDtoDataStoreEntityData}
     * @memberof CreateClientRequestDtoDataStoreEntity
     */
    'signature': CreateClientRequestDtoDataStoreEntityData;
    /**
     * 
     * @type {Array<CreateClientRequestDtoDataStoreEntityKeysInner>}
     * @memberof CreateClientRequestDtoDataStoreEntity
     */
    'keys': Array<CreateClientRequestDtoDataStoreEntityKeysInner>;
}
/**
 * @type CreateClientRequestDtoDataStoreEntityData
 * @export
 */
export type CreateClientRequestDtoDataStoreEntityData = CreateClientRequestDtoDataStoreEntityDataOneOf | CreateClientRequestDtoDataStoreEntityDataOneOf1;

/**
 * 
 * @export
 * @interface CreateClientRequestDtoDataStoreEntityDataOneOf
 */
export interface CreateClientRequestDtoDataStoreEntityDataOneOf {
    /**
     * 
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityDataOneOf
     */
    'type': CreateClientRequestDtoDataStoreEntityDataOneOfTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityDataOneOf
     */
    'url': string;
}

export const CreateClientRequestDtoDataStoreEntityDataOneOfTypeEnum = {
    File: 'FILE'
} as const;

export type CreateClientRequestDtoDataStoreEntityDataOneOfTypeEnum = typeof CreateClientRequestDtoDataStoreEntityDataOneOfTypeEnum[keyof typeof CreateClientRequestDtoDataStoreEntityDataOneOfTypeEnum];

/**
 * 
 * @export
 * @interface CreateClientRequestDtoDataStoreEntityDataOneOf1
 */
export interface CreateClientRequestDtoDataStoreEntityDataOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityDataOneOf1
     */
    'type': CreateClientRequestDtoDataStoreEntityDataOneOf1TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityDataOneOf1
     */
    'url': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CreateClientRequestDtoDataStoreEntityDataOneOf1
     */
    'headers'?: { [key: string]: string; };
}

export const CreateClientRequestDtoDataStoreEntityDataOneOf1TypeEnum = {
    Http: 'HTTP',
    Https: 'HTTPS'
} as const;

export type CreateClientRequestDtoDataStoreEntityDataOneOf1TypeEnum = typeof CreateClientRequestDtoDataStoreEntityDataOneOf1TypeEnum[keyof typeof CreateClientRequestDtoDataStoreEntityDataOneOf1TypeEnum];

/**
 * 
 * @export
 * @interface CreateClientRequestDtoDataStoreEntityKeysInner
 */
export interface CreateClientRequestDtoDataStoreEntityKeysInner {
    /**
     * Key Type (e.g. RSA or EC
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityKeysInner
     */
    'kty'?: CreateClientRequestDtoDataStoreEntityKeysInnerKtyEnum;
    /**
     * Curve name
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityKeysInner
     */
    'crv'?: CreateClientRequestDtoDataStoreEntityKeysInnerCrvEnum;
    /**
     * Algorithm
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityKeysInner
     */
    'alg'?: CreateClientRequestDtoDataStoreEntityKeysInnerAlgEnum;
    /**
     * Public Key Use
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityKeysInner
     */
    'use'?: CreateClientRequestDtoDataStoreEntityKeysInnerUseEnum;
    /**
     * Unique key ID
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityKeysInner
     */
    'kid'?: string;
    /**
     * (RSA) Key modulus
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityKeysInner
     */
    'n'?: string;
    /**
     * (RSA) Key exponent
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityKeysInner
     */
    'e'?: string;
    /**
     * (EC) X Coordinate
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityKeysInner
     */
    'x'?: string;
    /**
     * (EC) Y Coordinate
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityKeysInner
     */
    'y'?: string;
    /**
     * (EC) Private Key
     * @type {string}
     * @memberof CreateClientRequestDtoDataStoreEntityKeysInner
     */
    'd'?: string;
}

export const CreateClientRequestDtoDataStoreEntityKeysInnerKtyEnum = {
    Ec: 'EC',
    Rsa: 'RSA'
} as const;

export type CreateClientRequestDtoDataStoreEntityKeysInnerKtyEnum = typeof CreateClientRequestDtoDataStoreEntityKeysInnerKtyEnum[keyof typeof CreateClientRequestDtoDataStoreEntityKeysInnerKtyEnum];
export const CreateClientRequestDtoDataStoreEntityKeysInnerCrvEnum = {
    Secp256k1: 'secp256k1',
    P256: 'P-256'
} as const;

export type CreateClientRequestDtoDataStoreEntityKeysInnerCrvEnum = typeof CreateClientRequestDtoDataStoreEntityKeysInnerCrvEnum[keyof typeof CreateClientRequestDtoDataStoreEntityKeysInnerCrvEnum];
export const CreateClientRequestDtoDataStoreEntityKeysInnerAlgEnum = {
    Es256K: 'ES256K',
    Es256: 'ES256',
    Rs256: 'RS256'
} as const;

export type CreateClientRequestDtoDataStoreEntityKeysInnerAlgEnum = typeof CreateClientRequestDtoDataStoreEntityKeysInnerAlgEnum[keyof typeof CreateClientRequestDtoDataStoreEntityKeysInnerAlgEnum];
export const CreateClientRequestDtoDataStoreEntityKeysInnerUseEnum = {
    Sig: 'sig',
    Enc: 'enc'
} as const;

export type CreateClientRequestDtoDataStoreEntityKeysInnerUseEnum = typeof CreateClientRequestDtoDataStoreEntityKeysInnerUseEnum[keyof typeof CreateClientRequestDtoDataStoreEntityKeysInnerUseEnum];

/**
 * 
 * @export
 * @interface CreateClientResponseDto
 */
export interface CreateClientResponseDto {
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDto
     */
    'name': string;
    /**
     * plaintext secret for authenticating to armory
     * @type {string}
     * @memberof CreateClientResponseDto
     */
    'clientSecret': string;
    /**
     * plaintext secret for authenticating to data store
     * @type {string}
     * @memberof CreateClientResponseDto
     */
    'dataSecret': string | null;
    /**
     * 
     * @type {any}
     * @memberof CreateClientResponseDto
     */
    'createdAt': any;
    /**
     * 
     * @type {any}
     * @memberof CreateClientResponseDto
     */
    'updatedAt': any;
    /**
     * 
     * @type {CreateClientResponseDtoDataStore}
     * @memberof CreateClientResponseDto
     */
    'dataStore': CreateClientResponseDtoDataStore;
    /**
     * 
     * @type {CreateClientResponseDtoPolicyEngine}
     * @memberof CreateClientResponseDto
     */
    'policyEngine': CreateClientResponseDtoPolicyEngine;
}
/**
 * 
 * @export
 * @interface CreateClientResponseDtoDataStore
 */
export interface CreateClientResponseDtoDataStore {
    /**
     * 
     * @type {CreateClientRequestDtoDataStoreEntityKeysInner}
     * @memberof CreateClientResponseDtoDataStore
     */
    'entityPublicKey': CreateClientRequestDtoDataStoreEntityKeysInner;
    /**
     * 
     * @type {CreateClientRequestDtoDataStoreEntityKeysInner}
     * @memberof CreateClientResponseDtoDataStore
     */
    'policyPublicKey': CreateClientRequestDtoDataStoreEntityKeysInner;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoDataStore
     */
    'entityDataUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoDataStore
     */
    'policyDataUrl'?: string;
}
/**
 * 
 * @export
 * @interface CreateClientResponseDtoPolicyEngine
 */
export interface CreateClientResponseDtoPolicyEngine {
    /**
     * 
     * @type {Array<CreateClientResponseDtoPolicyEngineNodesInner>}
     * @memberof CreateClientResponseDtoPolicyEngine
     */
    'nodes': Array<CreateClientResponseDtoPolicyEngineNodesInner>;
}
/**
 * 
 * @export
 * @interface CreateClientResponseDtoPolicyEngineNodesInner
 */
export interface CreateClientResponseDtoPolicyEngineNodesInner {
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInner
     */
    'clientId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInner
     */
    'clientSecret'?: string;
    /**
     * 
     * @type {CreateClientResponseDtoPolicyEngineNodesInnerPublicKey}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInner
     */
    'publicKey': CreateClientResponseDtoPolicyEngineNodesInnerPublicKey;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInner
     */
    'url': string;
}
/**
 * @type CreateClientResponseDtoPolicyEngineNodesInnerPublicKey
 * @export
 */
export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKey = CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf | CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1 | CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2 | CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3;

/**
 * 
 * @export
 * @interface CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf
 */
export interface CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf {
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf
     */
    'kty': CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfKtyEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf
     */
    'alg': CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfAlgEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf
     */
    'use'?: CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfUseEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf
     */
    'kid': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf
     */
    'addr'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf
     */
    'crv': CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfCrvEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf
     */
    'x': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf
     */
    'y': string;
}

export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfKtyEnum = {
    Ec: 'EC'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfKtyEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfKtyEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfKtyEnum];
export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfAlgEnum = {
    Es256K: 'ES256K'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfAlgEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfAlgEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfAlgEnum];
export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfUseEnum = {
    Sig: 'sig',
    Enc: 'enc'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfUseEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfUseEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfUseEnum];
export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfCrvEnum = {
    Secp256k1: 'secp256k1'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfCrvEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfCrvEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOfCrvEnum];

/**
 * 
 * @export
 * @interface CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1
 */
export interface CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1
     */
    'kty': CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1KtyEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1
     */
    'alg': CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1AlgEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1
     */
    'use'?: CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1UseEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1
     */
    'kid': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1
     */
    'addr'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1
     */
    'crv': CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1CrvEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1
     */
    'x': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1
     */
    'y': string;
}

export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1KtyEnum = {
    Ec: 'EC'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1KtyEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1KtyEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1KtyEnum];
export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1AlgEnum = {
    Es256: 'ES256'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1AlgEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1AlgEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1AlgEnum];
export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1UseEnum = {
    Sig: 'sig',
    Enc: 'enc'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1UseEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1UseEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1UseEnum];
export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1CrvEnum = {
    P256: 'P-256'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1CrvEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1CrvEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf1CrvEnum];

/**
 * 
 * @export
 * @interface CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2
 */
export interface CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2
     */
    'kty': CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2KtyEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2
     */
    'alg': CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2AlgEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2
     */
    'use'?: CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2UseEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2
     */
    'kid': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2
     */
    'addr'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2
     */
    'n': string;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2
     */
    'e': string;
}

export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2KtyEnum = {
    Rsa: 'RSA'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2KtyEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2KtyEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2KtyEnum];
export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2AlgEnum = {
    Rs256: 'RS256'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2AlgEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2AlgEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2AlgEnum];
export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2UseEnum = {
    Sig: 'sig',
    Enc: 'enc'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2UseEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2UseEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf2UseEnum];

/**
 * 
 * @export
 * @interface CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3
 */
export interface CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3 {
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3
     */
    'kty': CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3KtyEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3
     */
    'crv': CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3CrvEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3
     */
    'alg': CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3AlgEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3
     */
    'use'?: CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3UseEnum;
    /**
     * 
     * @type {string}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3
     */
    'kid': string;
    /**
     * 
     * @type {any}
     * @memberof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3
     */
    'addr': any;
}

export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3KtyEnum = {
    Ec: 'EC'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3KtyEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3KtyEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3KtyEnum];
export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3CrvEnum = {
    Secp256k1: 'secp256k1'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3CrvEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3CrvEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3CrvEnum];
export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3AlgEnum = {
    Es256K: 'ES256K'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3AlgEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3AlgEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3AlgEnum];
export const CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3UseEnum = {
    Sig: 'sig',
    Enc: 'enc'
} as const;

export type CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3UseEnum = typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3UseEnum[keyof typeof CreateClientResponseDtoPolicyEngineNodesInnerPublicKeyOneOf3UseEnum];

/**
 * 
 * @export
 * @interface EntityDataStoreDto
 */
export interface EntityDataStoreDto {
    /**
     * 
     * @type {EntityDataStoreDtoEntity}
     * @memberof EntityDataStoreDto
     */
    'entity': EntityDataStoreDtoEntity;
}
/**
 * 
 * @export
 * @interface EntityDataStoreDtoEntity
 */
export interface EntityDataStoreDtoEntity {
    /**
     * 
     * @type {EntityDataStoreDtoEntityData}
     * @memberof EntityDataStoreDtoEntity
     */
    'data': EntityDataStoreDtoEntityData;
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntity
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface EntityDataStoreDtoEntityData
 */
export interface EntityDataStoreDtoEntityData {
    /**
     * 
     * @type {Array<EntityDataStoreDtoEntityDataAddressBookInner>}
     * @memberof EntityDataStoreDtoEntityData
     */
    'addressBook': Array<EntityDataStoreDtoEntityDataAddressBookInner>;
    /**
     * 
     * @type {Array<EntityDataStoreDtoEntityDataCredentialsInner>}
     * @memberof EntityDataStoreDtoEntityData
     */
    'credentials': Array<EntityDataStoreDtoEntityDataCredentialsInner>;
    /**
     * 
     * @type {Array<EntityDataStoreDtoEntityDataTokensInner>}
     * @memberof EntityDataStoreDtoEntityData
     */
    'tokens': Array<EntityDataStoreDtoEntityDataTokensInner>;
    /**
     * 
     * @type {Array<EntityDataStoreDtoEntityDataUserGroupMembersInner>}
     * @memberof EntityDataStoreDtoEntityData
     */
    'userGroupMembers': Array<EntityDataStoreDtoEntityDataUserGroupMembersInner>;
    /**
     * 
     * @type {Array<EntityDataStoreDtoEntityDataUserGroupsInner>}
     * @memberof EntityDataStoreDtoEntityData
     */
    'userGroups': Array<EntityDataStoreDtoEntityDataUserGroupsInner>;
    /**
     * 
     * @type {Array<EntityDataStoreDtoEntityDataUserAccountsInner>}
     * @memberof EntityDataStoreDtoEntityData
     */
    'userAccounts': Array<EntityDataStoreDtoEntityDataUserAccountsInner>;
    /**
     * 
     * @type {Array<EntityDataStoreDtoEntityDataUsersInner>}
     * @memberof EntityDataStoreDtoEntityData
     */
    'users': Array<EntityDataStoreDtoEntityDataUsersInner>;
    /**
     * 
     * @type {Array<EntityDataStoreDtoEntityDataAccountGroupMembersInner>}
     * @memberof EntityDataStoreDtoEntityData
     */
    'accountGroupMembers': Array<EntityDataStoreDtoEntityDataAccountGroupMembersInner>;
    /**
     * 
     * @type {Array<EntityDataStoreDtoEntityDataUserGroupsInner>}
     * @memberof EntityDataStoreDtoEntityData
     */
    'accountGroups': Array<EntityDataStoreDtoEntityDataUserGroupsInner>;
    /**
     * 
     * @type {Array<EntityDataStoreDtoEntityDataAccountsInner>}
     * @memberof EntityDataStoreDtoEntityData
     */
    'accounts': Array<EntityDataStoreDtoEntityDataAccountsInner>;
}
/**
 * 
 * @export
 * @interface EntityDataStoreDtoEntityDataAccountGroupMembersInner
 */
export interface EntityDataStoreDtoEntityDataAccountGroupMembersInner {
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataAccountGroupMembersInner
     */
    'accountId': string;
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataAccountGroupMembersInner
     */
    'groupId': string;
}
/**
 * 
 * @export
 * @interface EntityDataStoreDtoEntityDataAccountsInner
 */
export interface EntityDataStoreDtoEntityDataAccountsInner {
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataAccountsInner
     */
    'id': string;
    /**
     * 
     * @type {any}
     * @memberof EntityDataStoreDtoEntityDataAccountsInner
     */
    'address': any;
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataAccountsInner
     */
    'accountType': EntityDataStoreDtoEntityDataAccountsInnerAccountTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof EntityDataStoreDtoEntityDataAccountsInner
     */
    'chainId'?: number;
}

export const EntityDataStoreDtoEntityDataAccountsInnerAccountTypeEnum = {
    Eoa: 'eoa',
    _4337: '4337'
} as const;

export type EntityDataStoreDtoEntityDataAccountsInnerAccountTypeEnum = typeof EntityDataStoreDtoEntityDataAccountsInnerAccountTypeEnum[keyof typeof EntityDataStoreDtoEntityDataAccountsInnerAccountTypeEnum];

/**
 * 
 * @export
 * @interface EntityDataStoreDtoEntityDataAddressBookInner
 */
export interface EntityDataStoreDtoEntityDataAddressBookInner {
    /**
     * 
     * @type {any}
     * @memberof EntityDataStoreDtoEntityDataAddressBookInner
     */
    'id': any;
    /**
     * 
     * @type {any}
     * @memberof EntityDataStoreDtoEntityDataAddressBookInner
     */
    'address': any;
    /**
     * 
     * @type {number}
     * @memberof EntityDataStoreDtoEntityDataAddressBookInner
     */
    'chainId': number;
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataAddressBookInner
     */
    'classification': EntityDataStoreDtoEntityDataAddressBookInnerClassificationEnum;
}

export const EntityDataStoreDtoEntityDataAddressBookInnerClassificationEnum = {
    External: 'external',
    Counterparty: 'counterparty',
    Internal: 'internal',
    Managed: 'managed'
} as const;

export type EntityDataStoreDtoEntityDataAddressBookInnerClassificationEnum = typeof EntityDataStoreDtoEntityDataAddressBookInnerClassificationEnum[keyof typeof EntityDataStoreDtoEntityDataAddressBookInnerClassificationEnum];

/**
 * 
 * @export
 * @interface EntityDataStoreDtoEntityDataCredentialsInner
 */
export interface EntityDataStoreDtoEntityDataCredentialsInner {
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataCredentialsInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataCredentialsInner
     */
    'userId': string;
    /**
     * 
     * @type {CreateClientResponseDtoPolicyEngineNodesInnerPublicKey}
     * @memberof EntityDataStoreDtoEntityDataCredentialsInner
     */
    'key': CreateClientResponseDtoPolicyEngineNodesInnerPublicKey;
}
/**
 * 
 * @export
 * @interface EntityDataStoreDtoEntityDataTokensInner
 */
export interface EntityDataStoreDtoEntityDataTokensInner {
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataTokensInner
     */
    'id': string;
    /**
     * 
     * @type {any}
     * @memberof EntityDataStoreDtoEntityDataTokensInner
     */
    'address': any;
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataTokensInner
     */
    'symbol': string | null;
    /**
     * 
     * @type {number}
     * @memberof EntityDataStoreDtoEntityDataTokensInner
     */
    'chainId': number;
    /**
     * 
     * @type {number}
     * @memberof EntityDataStoreDtoEntityDataTokensInner
     */
    'decimals': number;
}
/**
 * 
 * @export
 * @interface EntityDataStoreDtoEntityDataUserAccountsInner
 */
export interface EntityDataStoreDtoEntityDataUserAccountsInner {
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataUserAccountsInner
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataUserAccountsInner
     */
    'accountId': string;
}
/**
 * 
 * @export
 * @interface EntityDataStoreDtoEntityDataUserGroupMembersInner
 */
export interface EntityDataStoreDtoEntityDataUserGroupMembersInner {
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataUserGroupMembersInner
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataUserGroupMembersInner
     */
    'groupId': string;
}
/**
 * 
 * @export
 * @interface EntityDataStoreDtoEntityDataUserGroupsInner
 */
export interface EntityDataStoreDtoEntityDataUserGroupsInner {
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataUserGroupsInner
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface EntityDataStoreDtoEntityDataUsersInner
 */
export interface EntityDataStoreDtoEntityDataUsersInner {
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataUsersInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EntityDataStoreDtoEntityDataUsersInner
     */
    'role': EntityDataStoreDtoEntityDataUsersInnerRoleEnum;
}

export const EntityDataStoreDtoEntityDataUsersInnerRoleEnum = {
    Root: 'root',
    Admin: 'admin',
    Member: 'member',
    Manager: 'manager'
} as const;

export type EntityDataStoreDtoEntityDataUsersInnerRoleEnum = typeof EntityDataStoreDtoEntityDataUsersInnerRoleEnum[keyof typeof EntityDataStoreDtoEntityDataUsersInnerRoleEnum];

/**
 * 
 * @export
 * @interface ErrorResponseDto
 */
export interface ErrorResponseDto {
    /**
     * 
     * @type {number}
     * @memberof ErrorResponseDto
     */
    'status': ErrorResponseDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseDto
     */
    'message': string;
    /**
     * Extra data about the error
     * @type {object}
     * @memberof ErrorResponseDto
     */
    'context'?: object;
    /**
     * The error stacktrace (not available in production)
     * @type {string}
     * @memberof ErrorResponseDto
     */
    'stack'?: string;
    /**
     * The origin error (not available in production)
     * @type {OriginErrorDto}
     * @memberof ErrorResponseDto
     */
    'origin'?: OriginErrorDto;
}

export const ErrorResponseDtoStatusEnum = {
    NUMBER_100: 100,
    NUMBER_101: 101,
    NUMBER_102: 102,
    NUMBER_103: 103,
    NUMBER_200: 200,
    NUMBER_201: 201,
    NUMBER_202: 202,
    NUMBER_203: 203,
    NUMBER_204: 204,
    NUMBER_205: 205,
    NUMBER_206: 206,
    NUMBER_300: 300,
    NUMBER_301: 301,
    NUMBER_302: 302,
    NUMBER_303: 303,
    NUMBER_304: 304,
    NUMBER_307: 307,
    NUMBER_308: 308,
    NUMBER_400: 400,
    NUMBER_401: 401,
    NUMBER_402: 402,
    NUMBER_403: 403,
    NUMBER_404: 404,
    NUMBER_405: 405,
    NUMBER_406: 406,
    NUMBER_407: 407,
    NUMBER_408: 408,
    NUMBER_409: 409,
    NUMBER_410: 410,
    NUMBER_411: 411,
    NUMBER_412: 412,
    NUMBER_413: 413,
    NUMBER_414: 414,
    NUMBER_415: 415,
    NUMBER_416: 416,
    NUMBER_417: 417,
    NUMBER_418: 418,
    NUMBER_421: 421,
    NUMBER_422: 422,
    NUMBER_424: 424,
    NUMBER_428: 428,
    NUMBER_429: 429,
    NUMBER_500: 500,
    NUMBER_501: 501,
    NUMBER_502: 502,
    NUMBER_503: 503,
    NUMBER_504: 504,
    NUMBER_505: 505
} as const;

export type ErrorResponseDtoStatusEnum = typeof ErrorResponseDtoStatusEnum[keyof typeof ErrorResponseDtoStatusEnum];

/**
 * 
 * @export
 * @interface OriginErrorDto
 */
export interface OriginErrorDto {
    /**
     * 
     * @type {string}
     * @memberof OriginErrorDto
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof OriginErrorDto
     */
    'name': string;
    /**
     * The error stacktrace (not available in production)
     * @type {string}
     * @memberof OriginErrorDto
     */
    'stack'?: string;
}
/**
 * 
 * @export
 * @interface PolicyDataStoreDto
 */
export interface PolicyDataStoreDto {
    /**
     * 
     * @type {PolicyDataStoreDtoPolicy}
     * @memberof PolicyDataStoreDto
     */
    'policy': PolicyDataStoreDtoPolicy;
}
/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicy
 */
export interface PolicyDataStoreDtoPolicy {
    /**
     * 
     * @type {Array<PolicyDataStoreDtoPolicyDataInner>}
     * @memberof PolicyDataStoreDtoPolicy
     */
    'data': Array<PolicyDataStoreDtoPolicyDataInner>;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicy
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInner
 */
export interface PolicyDataStoreDtoPolicyDataInner {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInner
     */
    'description': string;
    /**
     * 
     * @type {Array<PolicyDataStoreDtoPolicyDataInnerWhenInner>}
     * @memberof PolicyDataStoreDtoPolicyDataInner
     */
    'when': Array<PolicyDataStoreDtoPolicyDataInnerWhenInner>;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInner
     */
    'then': PolicyDataStoreDtoPolicyDataInnerThenEnum;
}

export const PolicyDataStoreDtoPolicyDataInnerThenEnum = {
    Permit: 'permit',
    Forbid: 'forbid'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerThenEnum = typeof PolicyDataStoreDtoPolicyDataInnerThenEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerThenEnum];

/**
 * @type PolicyDataStoreDtoPolicyDataInnerWhenInner
 * @export
 */
export type PolicyDataStoreDtoPolicyDataInnerWhenInner = PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf1 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf10 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf11 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf13 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf14 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf15 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf17 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf19 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf2 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf20 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf21 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf22 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf23 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf25 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf3 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf30 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf32 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf33 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf35 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf36 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf38 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf39 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf40 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf5 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf6 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf7 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8 | PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf9;

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOfCriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf
     */
    'args': Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOfArgsEnum>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOfCriterionEnum = {
    CheckAction: 'checkAction'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOfCriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOfCriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOfCriterionEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOfArgsEnum = {
    SignTransaction: 'signTransaction',
    SignRaw: 'signRaw',
    SignMessage: 'signMessage',
    SignUserOperation: 'signUserOperation',
    SignTypedData: 'signTypedData',
    GrantPermission: 'grantPermission'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOfArgsEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOfArgsEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOfArgsEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf1
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf1 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf1
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf1CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf1
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf1CriterionEnum = {
    CheckResource: 'checkResource'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf1CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf1CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf1CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf10
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf10 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf10
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf10CriterionEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf10
     */
    'args': Array<any>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf10CriterionEnum = {
    CheckSourceId: 'checkSourceId'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf10CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf10CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf10CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf11
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf11 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf11
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf11CriterionEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf11
     */
    'args': Array<any>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf11CriterionEnum = {
    CheckSourceAddress: 'checkSourceAddress'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf11CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf11CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf11CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12
     */
    'args': Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12ArgsEnum>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12CriterionEnum = {
    CheckSourceAccountType: 'checkSourceAccountType'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12CriterionEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12ArgsEnum = {
    Eoa: 'eoa',
    _4337: '4337'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12ArgsEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12ArgsEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf12ArgsEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf13
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf13 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf13
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf13CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf13
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf13CriterionEnum = {
    CheckSourceClassification: 'checkSourceClassification'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf13CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf13CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf13CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf14
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf14 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf14
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf14CriterionEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf14
     */
    'args': Array<any>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf14CriterionEnum = {
    CheckDestinationId: 'checkDestinationId'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf14CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf14CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf14CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf15
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf15 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf15
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf15CriterionEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf15
     */
    'args': Array<any>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf15CriterionEnum = {
    CheckDestinationAddress: 'checkDestinationAddress'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf15CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf15CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf15CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16
     */
    'args': Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16ArgsEnum>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16CriterionEnum = {
    CheckDestinationAccountType: 'checkDestinationAccountType'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16CriterionEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16ArgsEnum = {
    Eoa: 'eoa',
    _4337: '4337'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16ArgsEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16ArgsEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf16ArgsEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf17
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf17 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf17
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf17CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf17
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf17CriterionEnum = {
    CheckDestinationClassification: 'checkDestinationClassification'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf17CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf17CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf17CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18CriterionEnum;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18
     */
    'args': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18Args;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18CriterionEnum = {
    CheckIntentAmount: 'checkIntentAmount'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18Args
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18Args {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18Args
     */
    'currency'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18ArgsCurrencyEnum;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18Args
     */
    'operator': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18ArgsOperatorEnum;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18Args
     */
    'value': string;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18ArgsCurrencyEnum = {
    Usd: 'fiat:usd',
    Eur: 'fiat:eur'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18ArgsCurrencyEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18ArgsCurrencyEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18ArgsCurrencyEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18ArgsOperatorEnum = {
    Gt: 'gt',
    Lt: 'lt',
    Gte: 'gte',
    Lte: 'lte',
    Eq: 'eq',
    Ne: 'ne'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18ArgsOperatorEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18ArgsOperatorEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18ArgsOperatorEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf19
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf19 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf19
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf19CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf19
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf19CriterionEnum = {
    CheckIntentChainId: 'checkIntentChainId'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf19CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf19CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf19CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf2
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf2 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf2
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf2CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf2
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf2CriterionEnum = {
    CheckPermission: 'checkPermission'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf2CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf2CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf2CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf20
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf20 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf20
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf20CriterionEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf20
     */
    'args': Array<any>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf20CriterionEnum = {
    CheckIntentContract: 'checkIntentContract'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf20CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf20CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf20CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf21
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf21 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf21
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf21CriterionEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf21
     */
    'args': Array<any>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf21CriterionEnum = {
    CheckIntentHexSignature: 'checkIntentHexSignature'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf21CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf21CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf21CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf22
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf22 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf22
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf22CriterionEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf22
     */
    'args': Array<any>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf22CriterionEnum = {
    CheckIntentSpender: 'checkIntentSpender'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf22CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf22CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf22CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf23
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf23 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf23
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf23CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf23
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf23CriterionEnum = {
    CheckIntentToken: 'checkIntentToken'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf23CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf23CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf23CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24
     */
    'args': Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24ArgsEnum>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24CriterionEnum = {
    CheckIntentType: 'checkIntentType'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24CriterionEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24ArgsEnum = {
    TransferNative: 'transferNative',
    TransferErc20: 'transferErc20',
    TransferErc721: 'transferErc721',
    TransferErc1155: 'transferErc1155',
    ApproveTokenAllowance: 'approveTokenAllowance',
    Permit: 'permit',
    Permit2: 'permit2',
    CallContract: 'callContract',
    RetryTransaction: 'retryTransaction',
    CancelTransaction: 'cancelTransaction',
    DeployContract: 'deployContract',
    DeployErc4337Account: 'deployErc4337Account',
    DeploySafeAccount: 'deploySafeAccount',
    SignMessage: 'signMessage',
    SignRaw: 'signRaw',
    SignTypedData: 'signTypedData',
    UserOperation: 'userOperation'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24ArgsEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24ArgsEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf24ArgsEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf25
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf25 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf25
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf25CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf25
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf25CriterionEnum = {
    CheckErc1155TokenId: 'checkERC1155TokenId'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf25CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf25CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf25CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26CriterionEnum;
    /**
     * 
     * @type {Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInner>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26
     */
    'args': Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInner>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26CriterionEnum = {
    CheckErc1155Transfers: 'checkERC1155Transfers'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInner
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInner {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInner
     */
    'tokenId': string;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInner
     */
    'operator': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInnerOperatorEnum;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInner
     */
    'value': string;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInnerOperatorEnum = {
    Gt: 'gt',
    Lt: 'lt',
    Gte: 'gte',
    Lte: 'lte',
    Eq: 'eq',
    Ne: 'ne'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInnerOperatorEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInnerOperatorEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInnerOperatorEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27
     */
    'args': Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27ArgsEnum>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27CriterionEnum = {
    CheckIntentAlgorithm: 'checkIntentAlgorithm'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27CriterionEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27ArgsEnum = {
    Es256K: 'ES256K',
    Es256: 'ES256',
    Rs256: 'RS256'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27ArgsEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27ArgsEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf27ArgsEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28CriterionEnum;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28
     */
    'args': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28Args;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28CriterionEnum = {
    CheckIntentDomain: 'checkIntentDomain'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28Args
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28Args {
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28Args
     */
    'version'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28Args
     */
    'chainId'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28Args
     */
    'name'?: Array<string>;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28Args
     */
    'verifyingContract'?: Array<any>;
}
/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29CriterionEnum;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29
     */
    'args': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29Args;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29CriterionEnum = {
    CheckIntentMessage: 'checkIntentMessage'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29Args
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29Args {
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29ArgsOperator}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29Args
     */
    'operator': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29ArgsOperator;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29Args
     */
    'value': string;
}
/**
 * @type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29ArgsOperator
 * @export
 */
export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29ArgsOperator = string;

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf3
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf3 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf3
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf3CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf3
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf3CriterionEnum = {
    CheckPrincipalId: 'checkPrincipalId'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf3CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf3CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf3CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf30
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf30 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf30
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf30CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf30
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf30CriterionEnum = {
    CheckIntentPayload: 'checkIntentPayload'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf30CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf30CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf30CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31CriterionEnum;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31
     */
    'args': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31Args;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31CriterionEnum = {
    CheckPermitDeadline: 'checkPermitDeadline'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31Args
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31Args {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31Args
     */
    'operator': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31ArgsOperatorEnum;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31Args
     */
    'value': string;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31ArgsOperatorEnum = {
    Gt: 'gt',
    Lt: 'lt',
    Gte: 'gte',
    Lte: 'lte',
    Eq: 'eq',
    Ne: 'ne'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31ArgsOperatorEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31ArgsOperatorEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31ArgsOperatorEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf32
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf32 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf32
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf32CriterionEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf32
     */
    'args': Array<any>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf32CriterionEnum = {
    CheckEntryPointId: 'checkEntryPointId'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf32CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf32CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf32CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf33
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf33 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf33
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf33CriterionEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf33
     */
    'args': Array<any>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf33CriterionEnum = {
    CheckEntryPointAddress: 'checkEntryPointAddress'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf33CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf33CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf33CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34
     */
    'args': Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34ArgsEnum>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34CriterionEnum = {
    CheckEntryPointAccountType: 'checkEntryPointAccountType'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34CriterionEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34ArgsEnum = {
    Eoa: 'eoa',
    _4337: '4337'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34ArgsEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34ArgsEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf34ArgsEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf35
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf35 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf35
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf35CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf35
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf35CriterionEnum = {
    CheckEntryPointClassification: 'checkEntryPointClassification'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf35CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf35CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf35CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf36
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf36 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf36
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf36CriterionEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf36
     */
    'args': Array<any>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf36CriterionEnum = {
    CheckBeneficiaryAddress: 'checkBeneficiaryAddress'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf36CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf36CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf36CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37CriterionEnum;
    /**
     * 
     * @type {Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37
     */
    'args': Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37CriterionEnum = {
    CheckUserOperationIntents: 'checkUserOperationIntents'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner {
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'type'?: Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerTypeEnum>;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'contract'?: Array<any>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'token'?: Array<string>;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'spender'?: Array<any>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'chainId'?: Array<string>;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'hexSignature'?: Array<any>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'algorithm'?: Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerAlgorithmEnum>;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSource}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'source'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSource;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSource}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'destination'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSource;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerTransfers}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'transfers'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerTransfers;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'amount'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18Args;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'message'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29Args;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'payload'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf29Args;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'domain'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf28Args;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInner
     */
    'deadline'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf31Args;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerTypeEnum = {
    TransferNative: 'transferNative',
    TransferErc20: 'transferErc20',
    TransferErc721: 'transferErc721',
    TransferErc1155: 'transferErc1155',
    ApproveTokenAllowance: 'approveTokenAllowance',
    Permit: 'permit',
    Permit2: 'permit2',
    CallContract: 'callContract',
    RetryTransaction: 'retryTransaction',
    CancelTransaction: 'cancelTransaction',
    DeployContract: 'deployContract',
    DeployErc4337Account: 'deployErc4337Account',
    DeploySafeAccount: 'deploySafeAccount',
    SignMessage: 'signMessage',
    SignRaw: 'signRaw',
    SignTypedData: 'signTypedData',
    UserOperation: 'userOperation'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerTypeEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerTypeEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerTypeEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerAlgorithmEnum = {
    Es256K: 'ES256K',
    Es256: 'ES256',
    Rs256: 'RS256'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerAlgorithmEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerAlgorithmEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerAlgorithmEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSource
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSource {
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSource
     */
    'id'?: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSource
     */
    'address'?: Array<any>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSource
     */
    'accountType'?: Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSourceAccountTypeEnum>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSource
     */
    'classification'?: Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSourceAccountTypeEnum = {
    Eoa: 'eoa',
    _4337: '4337'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSourceAccountTypeEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSourceAccountTypeEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerSourceAccountTypeEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerTransfers
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerTransfers {
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerTransfers
     */
    'tokens'?: Array<string>;
    /**
     * 
     * @type {Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInner>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf37ArgsInnerTransfers
     */
    'amounts'?: Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf26ArgsInner>;
}
/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf38
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf38 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf38
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf38CriterionEnum;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf38
     */
    'args': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf18Args;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf38CriterionEnum = {
    CheckGasFeeAmount: 'checkGasFeeAmount'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf38CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf38CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf38CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf39
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf39 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf39
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf39CriterionEnum;
    /**
     * 
     * @type {any}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf39
     */
    'args': any;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf39CriterionEnum = {
    CheckNonceNotExists: 'checkNonceNotExists'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf39CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf39CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf39CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4
     */
    'args': Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4ArgsEnum>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4CriterionEnum = {
    CheckPrincipalRole: 'checkPrincipalRole'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4CriterionEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4ArgsEnum = {
    Root: 'root',
    Admin: 'admin',
    Member: 'member',
    Manager: 'manager'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4ArgsEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4ArgsEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf4ArgsEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf40
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf40 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf40
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf40CriterionEnum;
    /**
     * 
     * @type {any}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf40
     */
    'args': any;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf40CriterionEnum = {
    CheckNonceExists: 'checkNonceExists'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf40CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf40CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf40CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41CriterionEnum;
    /**
     * 
     * @type {Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInner>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41
     */
    'args': Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInner>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41CriterionEnum = {
    CheckApprovals: 'checkApprovals'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInner
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInner {
    /**
     * 
     * @type {number}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInner
     */
    'approvalCount': number;
    /**
     * 
     * @type {boolean}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInner
     */
    'countPrincipal': boolean;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInner
     */
    'approvalEntityType': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInnerApprovalEntityTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInner
     */
    'entityIds': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInnerApprovalEntityTypeEnum = {
    User: 'Narval::User',
    UserRole: 'Narval::UserRole',
    UserGroup: 'Narval::UserGroup'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInnerApprovalEntityTypeEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInnerApprovalEntityTypeEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf41ArgsInnerApprovalEntityTypeEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42CriterionEnum;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42
     */
    'args': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42Args;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42CriterionEnum = {
    CheckSpendingLimit: 'checkSpendingLimit'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42Args
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42Args {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42Args
     */
    'limit': string;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42Args
     */
    'operator': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsOperatorEnum;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42Args
     */
    'currency'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsCurrencyEnum;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindow}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42Args
     */
    'timeWindow'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindow;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42Args
     */
    'filters'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsOperatorEnum = {
    Gt: 'gt',
    Lt: 'lt',
    Gte: 'gte',
    Lte: 'lte',
    Eq: 'eq',
    Ne: 'ne'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsOperatorEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsOperatorEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsOperatorEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsCurrencyEnum = {
    Usd: 'fiat:usd',
    Eur: 'fiat:eur'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsCurrencyEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsCurrencyEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsCurrencyEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters {
    /**
     * 
     * @type {boolean}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters
     */
    'perPrincipal'?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters
     */
    'tokens'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters
     */
    'users'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters
     */
    'resources'?: Array<string>;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters
     */
    'destinations'?: Array<any>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters
     */
    'chains'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters
     */
    'userGroups'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters
     */
    'accountGroups'?: Array<string>;
}
/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindow
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindow {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindow
     */
    'type'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindowTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindow
     */
    'period'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindowPeriodEnum;
    /**
     * 
     * @type {number}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindow
     */
    'value'?: number;
    /**
     * 
     * @type {number}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindow
     */
    'startDate'?: number;
    /**
     * 
     * @type {number}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindow
     */
    'endDate'?: number;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindowTypeEnum = {
    Rolling: 'rolling',
    Fixed: 'fixed'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindowTypeEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindowTypeEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindowTypeEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindowPeriodEnum = {
    _1d: '1d',
    _1m: '1m',
    _1y: '1y'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindowPeriodEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindowPeriodEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindowPeriodEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43CriterionEnum;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43Args}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43
     */
    'args': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43Args;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43CriterionEnum = {
    CheckRateLimit: 'checkRateLimit'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43Args
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43Args {
    /**
     * 
     * @type {number}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43Args
     */
    'limit': number;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindow}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43Args
     */
    'timeWindow'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsTimeWindow;
    /**
     * 
     * @type {PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf43Args
     */
    'filters'?: PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf42ArgsFilters;
}
/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf5
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf5 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf5
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf5CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf5
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf5CriterionEnum = {
    CheckPrincipalGroup: 'checkPrincipalGroup'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf5CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf5CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf5CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf6
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf6 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf6
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf6CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf6
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf6CriterionEnum = {
    CheckAccountId: 'checkAccountId'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf6CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf6CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf6CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf7
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf7 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf7
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf7CriterionEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf7
     */
    'args': Array<any>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf7CriterionEnum = {
    CheckAccountAddress: 'checkAccountAddress'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf7CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf7CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf7CriterionEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8
     */
    'args': Array<PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8ArgsEnum>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8CriterionEnum = {
    CheckAccountType: 'checkAccountType'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8CriterionEnum];
export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8ArgsEnum = {
    Eoa: 'eoa',
    _4337: '4337'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8ArgsEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8ArgsEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf8ArgsEnum];

/**
 * 
 * @export
 * @interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf9
 */
export interface PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf9 {
    /**
     * 
     * @type {string}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf9
     */
    'criterion': PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf9CriterionEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf9
     */
    'args': Array<string>;
}

export const PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf9CriterionEnum = {
    CheckAccountGroup: 'checkAccountGroup'
} as const;

export type PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf9CriterionEnum = typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf9CriterionEnum[keyof typeof PolicyDataStoreDtoPolicyDataInnerWhenInnerOneOf9CriterionEnum];

/**
 * 
 * @export
 * @interface PongDto
 */
export interface PongDto {
    /**
     * 
     * @type {boolean}
     * @memberof PongDto
     */
    'pong': boolean;
}
/**
 * 
 * @export
 * @interface SetEntityStoreDto
 */
export interface SetEntityStoreDto {
    /**
     * 
     * @type {EntityDataStoreDtoEntityData}
     * @memberof SetEntityStoreDto
     */
    'data': EntityDataStoreDtoEntityData;
    /**
     * 
     * @type {string}
     * @memberof SetEntityStoreDto
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface SetEntityStoreResponseDto
 */
export interface SetEntityStoreResponseDto {
    /**
     * 
     * @type {EntityDataStoreDtoEntity}
     * @memberof SetEntityStoreResponseDto
     */
    'entity': EntityDataStoreDtoEntity;
    /**
     * 
     * @type {number}
     * @memberof SetEntityStoreResponseDto
     */
    'version': number;
    /**
     * 
     * @type {SetEntityStoreResponseDtoLatestSync}
     * @memberof SetEntityStoreResponseDto
     */
    'latestSync': SetEntityStoreResponseDtoLatestSync;
}
/**
 * 
 * @export
 * @interface SetEntityStoreResponseDtoLatestSync
 */
export interface SetEntityStoreResponseDtoLatestSync {
    /**
     * 
     * @type {boolean}
     * @memberof SetEntityStoreResponseDtoLatestSync
     */
    'success': boolean;
}
/**
 * 
 * @export
 * @interface SetPolicyStoreDto
 */
export interface SetPolicyStoreDto {
    /**
     * 
     * @type {Array<PolicyDataStoreDtoPolicyDataInner>}
     * @memberof SetPolicyStoreDto
     */
    'data': Array<PolicyDataStoreDtoPolicyDataInner>;
    /**
     * 
     * @type {string}
     * @memberof SetPolicyStoreDto
     */
    'signature': string;
}
/**
 * 
 * @export
 * @interface SetPolicyStoreResponseDto
 */
export interface SetPolicyStoreResponseDto {
    /**
     * 
     * @type {PolicyDataStoreDtoPolicy}
     * @memberof SetPolicyStoreResponseDto
     */
    'policy': PolicyDataStoreDtoPolicy;
    /**
     * 
     * @type {number}
     * @memberof SetPolicyStoreResponseDto
     */
    'version': number;
    /**
     * 
     * @type {SetEntityStoreResponseDtoLatestSync}
     * @memberof SetPolicyStoreResponseDto
     */
    'latestSync': SetEntityStoreResponseDtoLatestSync;
}
/**
 * 
 * @export
 * @interface SyncDto
 */
export interface SyncDto {
    /**
     * 
     * @type {SetEntityStoreResponseDtoLatestSync}
     * @memberof SyncDto
     */
    'latestSync': SetEntityStoreResponseDtoLatestSync;
}

/**
 * ApplicationApi - axios parameter creator
 * @export
 */
export const ApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationApi - functional programming interface
 * @export
 */
export const ApplicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ping(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PongDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApplicationApi.ping']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApplicationApi - factory interface
 * @export
 */
export const ApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicationApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ping(options?: any): AxiosPromise<PongDto> {
            return localVarFp.ping(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationApi - object-oriented interface
 * @export
 * @class ApplicationApi
 * @extends {BaseAPI}
 */
export class ApplicationApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationApi
     */
    public ping(options?: RawAxiosRequestConfig) {
        return ApplicationApiFp(this.configuration).ping(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export const AuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Approves an authorization request
         * @param {string} id 
         * @param {string} xClientId 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approve: async (id: string, xClientId: string, body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('approve', 'id', id)
            // verify required parameter 'xClientId' is not null or undefined
            assertParamExists('approve', 'xClientId', xClientId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('approve', 'body', body)
            const localVarPath = `/authorization-requests/{id}/approvals`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CLIENT_ID required
            await setApiKeyToObject(localVarHeaderParameter, "CLIENT_ID", configuration)

            if (xClientId != null) {
                localVarHeaderParameter['x-client-id'] = String(xClientId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submits a new authorization request for evaluation by the policy engine
         * @param {string} xClientId 
         * @param {AuthorizationRequestDto} authorizationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluate: async (xClientId: string, authorizationRequestDto: AuthorizationRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xClientId' is not null or undefined
            assertParamExists('evaluate', 'xClientId', xClientId)
            // verify required parameter 'authorizationRequestDto' is not null or undefined
            assertParamExists('evaluate', 'authorizationRequestDto', authorizationRequestDto)
            const localVarPath = `/authorization-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CLIENT_ID required
            await setApiKeyToObject(localVarHeaderParameter, "CLIENT_ID", configuration)

            if (xClientId != null) {
                localVarHeaderParameter['x-client-id'] = String(xClientId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorizationRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets an authorization request by ID
         * @param {string} id 
         * @param {string} xClientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (id: string, xClientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            // verify required parameter 'xClientId' is not null or undefined
            assertParamExists('getById', 'xClientId', xClientId)
            const localVarPath = `/authorization-requests/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CLIENT_ID required
            await setApiKeyToObject(localVarHeaderParameter, "CLIENT_ID", configuration)

            if (xClientId != null) {
                localVarHeaderParameter['x-client-id'] = String(xClientId);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export const AuthorizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Approves an authorization request
         * @param {string} id 
         * @param {string} xClientId 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approve(id: string, xClientId: string, body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approve(id, xClientId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.approve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Submits a new authorization request for evaluation by the policy engine
         * @param {string} xClientId 
         * @param {AuthorizationRequestDto} authorizationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evaluate(xClientId: string, authorizationRequestDto: AuthorizationRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evaluate(xClientId, authorizationRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.evaluate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets an authorization request by ID
         * @param {string} id 
         * @param {string} xClientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(id: string, xClientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(id, xClientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthorizationApi.getById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthorizationApi - factory interface
 * @export
 */
export const AuthorizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizationApiFp(configuration)
    return {
        /**
         * 
         * @summary Approves an authorization request
         * @param {string} id 
         * @param {string} xClientId 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approve(id: string, xClientId: string, body: string, options?: any): AxiosPromise<AuthorizationResponseDto> {
            return localVarFp.approve(id, xClientId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submits a new authorization request for evaluation by the policy engine
         * @param {string} xClientId 
         * @param {AuthorizationRequestDto} authorizationRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evaluate(xClientId: string, authorizationRequestDto: AuthorizationRequestDto, options?: any): AxiosPromise<AuthorizationResponseDto> {
            return localVarFp.evaluate(xClientId, authorizationRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets an authorization request by ID
         * @param {string} id 
         * @param {string} xClientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(id: string, xClientId: string, options?: any): AxiosPromise<AuthorizationResponseDto> {
            return localVarFp.getById(id, xClientId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export class AuthorizationApi extends BaseAPI {
    /**
     * 
     * @summary Approves an authorization request
     * @param {string} id 
     * @param {string} xClientId 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public approve(id: string, xClientId: string, body: string, options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).approve(id, xClientId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submits a new authorization request for evaluation by the policy engine
     * @param {string} xClientId 
     * @param {AuthorizationRequestDto} authorizationRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public evaluate(xClientId: string, authorizationRequestDto: AuthorizationRequestDto, options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).evaluate(xClientId, authorizationRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets an authorization request by ID
     * @param {string} id 
     * @param {string} xClientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    public getById(id: string, xClientId: string, options?: RawAxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).getById(id, xClientId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ClientApi - axios parameter creator
 * @export
 */
export const ClientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new client
         * @param {string} xApiKey 
         * @param {CreateClientRequestDto} createClientRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (xApiKey: string, createClientRequestDto: CreateClientRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('create', 'xApiKey', xApiKey)
            // verify required parameter 'createClientRequestDto' is not null or undefined
            assertParamExists('create', 'createClientRequestDto', createClientRequestDto)
            const localVarPath = `/v1/clients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ADMIN_API_KEY required
            await setApiKeyToObject(localVarHeaderParameter, "ADMIN_API_KEY", configuration)

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createClientRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientApi - functional programming interface
 * @export
 */
export const ClientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClientApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new client
         * @param {string} xApiKey 
         * @param {CreateClientRequestDto} createClientRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(xApiKey: string, createClientRequestDto: CreateClientRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateClientResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(xApiKey, createClientRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClientApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClientApi - factory interface
 * @export
 */
export const ClientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClientApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new client
         * @param {string} xApiKey 
         * @param {CreateClientRequestDto} createClientRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(xApiKey: string, createClientRequestDto: CreateClientRequestDto, options?: any): AxiosPromise<CreateClientResponseDto> {
            return localVarFp.create(xApiKey, createClientRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
export class ClientApi extends BaseAPI {
    /**
     * 
     * @summary Creates a new client
     * @param {string} xApiKey 
     * @param {CreateClientRequestDto} createClientRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    public create(xApiKey: string, createClientRequestDto: CreateClientRequestDto, options?: RawAxiosRequestConfig) {
        return ClientApiFp(this.configuration).create(xApiKey, createClientRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ManagedDataStoreApi - axios parameter creator
 * @export
 */
export const ManagedDataStoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the client entities
         * @param {string} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntities: async (clientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('getEntities', 'clientId', clientId)
            const localVarPath = `/v1/data/entities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the client policies
         * @param {string} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies: async (clientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('getPolicies', 'clientId', clientId)
            const localVarPath = `/v1/data/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets the client entities
         * @param {string} clientId 
         * @param {SetEntityStoreDto} setEntityStoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setEntities: async (clientId: string, setEntityStoreDto: SetEntityStoreDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('setEntities', 'clientId', clientId)
            // verify required parameter 'setEntityStoreDto' is not null or undefined
            assertParamExists('setEntities', 'setEntityStoreDto', setEntityStoreDto)
            const localVarPath = `/v1/data/entities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setEntityStoreDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets the client policies
         * @param {string} clientId 
         * @param {SetPolicyStoreDto} setPolicyStoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPolicies: async (clientId: string, setPolicyStoreDto: SetPolicyStoreDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('setPolicies', 'clientId', clientId)
            // verify required parameter 'setPolicyStoreDto' is not null or undefined
            assertParamExists('setPolicies', 'setPolicyStoreDto', setPolicyStoreDto)
            const localVarPath = `/v1/data/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = clientId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setPolicyStoreDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sync the client data store with the engine cluster
         * @param {string} xClientSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sync: async (xClientSecret: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xClientSecret' is not null or undefined
            assertParamExists('sync', 'xClientSecret', xClientSecret)
            const localVarPath = `/v1/data/sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CLIENT_SECRET required
            await setApiKeyToObject(localVarHeaderParameter, "CLIENT_SECRET", configuration)

            if (xClientSecret != null) {
                localVarHeaderParameter['x-client-secret'] = String(xClientSecret);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManagedDataStoreApi - functional programming interface
 * @export
 */
export const ManagedDataStoreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManagedDataStoreApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the client entities
         * @param {string} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntities(clientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityDataStoreDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntities(clientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedDataStoreApi.getEntities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Gets the client policies
         * @param {string} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicies(clientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyDataStoreDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicies(clientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedDataStoreApi.getPolicies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Sets the client entities
         * @param {string} clientId 
         * @param {SetEntityStoreDto} setEntityStoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setEntities(clientId: string, setEntityStoreDto: SetEntityStoreDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetEntityStoreResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setEntities(clientId, setEntityStoreDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedDataStoreApi.setEntities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Sets the client policies
         * @param {string} clientId 
         * @param {SetPolicyStoreDto} setPolicyStoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPolicies(clientId: string, setPolicyStoreDto: SetPolicyStoreDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetPolicyStoreResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPolicies(clientId, setPolicyStoreDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedDataStoreApi.setPolicies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Sync the client data store with the engine cluster
         * @param {string} xClientSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sync(xClientSecret: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SyncDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sync(xClientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManagedDataStoreApi.sync']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ManagedDataStoreApi - factory interface
 * @export
 */
export const ManagedDataStoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManagedDataStoreApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the client entities
         * @param {string} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntities(clientId: string, options?: any): AxiosPromise<EntityDataStoreDto> {
            return localVarFp.getEntities(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the client policies
         * @param {string} clientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies(clientId: string, options?: any): AxiosPromise<PolicyDataStoreDto> {
            return localVarFp.getPolicies(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets the client entities
         * @param {string} clientId 
         * @param {SetEntityStoreDto} setEntityStoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setEntities(clientId: string, setEntityStoreDto: SetEntityStoreDto, options?: any): AxiosPromise<SetEntityStoreResponseDto> {
            return localVarFp.setEntities(clientId, setEntityStoreDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets the client policies
         * @param {string} clientId 
         * @param {SetPolicyStoreDto} setPolicyStoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPolicies(clientId: string, setPolicyStoreDto: SetPolicyStoreDto, options?: any): AxiosPromise<SetPolicyStoreResponseDto> {
            return localVarFp.setPolicies(clientId, setPolicyStoreDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sync the client data store with the engine cluster
         * @param {string} xClientSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sync(xClientSecret: string, options?: any): AxiosPromise<SyncDto> {
            return localVarFp.sync(xClientSecret, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ManagedDataStoreApi - object-oriented interface
 * @export
 * @class ManagedDataStoreApi
 * @extends {BaseAPI}
 */
export class ManagedDataStoreApi extends BaseAPI {
    /**
     * 
     * @summary Gets the client entities
     * @param {string} clientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedDataStoreApi
     */
    public getEntities(clientId: string, options?: RawAxiosRequestConfig) {
        return ManagedDataStoreApiFp(this.configuration).getEntities(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the client policies
     * @param {string} clientId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedDataStoreApi
     */
    public getPolicies(clientId: string, options?: RawAxiosRequestConfig) {
        return ManagedDataStoreApiFp(this.configuration).getPolicies(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets the client entities
     * @param {string} clientId 
     * @param {SetEntityStoreDto} setEntityStoreDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedDataStoreApi
     */
    public setEntities(clientId: string, setEntityStoreDto: SetEntityStoreDto, options?: RawAxiosRequestConfig) {
        return ManagedDataStoreApiFp(this.configuration).setEntities(clientId, setEntityStoreDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets the client policies
     * @param {string} clientId 
     * @param {SetPolicyStoreDto} setPolicyStoreDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedDataStoreApi
     */
    public setPolicies(clientId: string, setPolicyStoreDto: SetPolicyStoreDto, options?: RawAxiosRequestConfig) {
        return ManagedDataStoreApiFp(this.configuration).setPolicies(clientId, setPolicyStoreDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sync the client data store with the engine cluster
     * @param {string} xClientSecret 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManagedDataStoreApi
     */
    public sync(xClientSecret: string, options?: RawAxiosRequestConfig) {
        return ManagedDataStoreApiFp(this.configuration).sync(xClientSecret, options).then((request) => request(this.axios, this.basePath));
    }
}



